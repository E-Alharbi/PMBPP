package PMBPP.AutoScript;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Vector;

import PMBPP.Log.Log;
import PMBPP.ML.Model.Parameters;
import PMBPP.Utilities.MTZReader;
import PMBPP.Utilities.TxtFiles;

public class ScriptGenerator {
	
	public static void main(String[] args) throws IOException {
		Parameters.setReflectionFile("/Users/emadalharbi/Downloads/TestRobinScriptMR/inputdata/1o6a-1.9-parrot-noncs.mtz");
		System.out.println(new ScriptGenerator().ScriptForColSelection("P","Phase (No density modification applied)"));
	}
	public String ScriptForColSelection(String ColType, String ColName ) throws IOException {
		HashMap<String, Vector<String>> mtzcol=new MTZReader(Parameters.getReflectionFile()).GetColLabels();
		String Script="";
		if(mtzcol.containsKey(ColType)==false) {
			Script="echo \"No "+ColName+"column of type "+ColType+" in the reflection file. One or more of the pipelines need this column. We cannot continue and run the pipeline!\" \n exit 1  ";
			return Script;
		}
		
		String options="options=(";
		String switchoption="select opt in \"${options[@]}\"\n"
				+ "do\n"
				+ "    case $opt in \n";
		if(mtzcol.get(ColType).size()>1) {
			for(int i=0 ; i < mtzcol.get(ColType).size();++i) {
				options+="\""+mtzcol.get(ColType).get(i)+"\" ";
				switchoption+="\""+mtzcol.get(ColType).get(i)+"\")\n";
				switchoption+="echo \"You chose: "+mtzcol.get(ColType).get(i)+"\"\n";
				switchoption+=ColType+"="+mtzcol.get(ColType).get(i)+" \n";
				switchoption+="break \n";
				switchoption+=";; \n";
			}
			
			options+="\"Quit\")";
			switchoption+="\"Quit\")\n"
					+ "            break\n"
					+ "            ;;\n"
					+ "        *) echo \"invalid option $REPLY\";;\n"
					+ "    esac\n"
					+ "done";
			Script+="PS3='Please enter your choice:' \n "+"echo 'One or more of the pipelines need a "+ColName+" column of type "+ColType+" and we found those in the reflection file, please enter your choice by typing in the option number.  '\n"+options+"\n"+switchoption;
		}
		if(mtzcol.get(ColType).size()==1 || Parameters.getPickFirstMatchCol().equals("T")) {
			Script="echo \"Warning: We will use "+mtzcol.get(ColType).get(0)+" from the reflection file because one or more pipelines need this column, and it's the only column with type "+ColType+" in the reflection file. If this column is wrong, please add the correct column to the reflection file and re-run the script again. \" \n";
			Script+=ColType+"="+mtzcol.get(ColType).get(0);
		}
		
		
		return Script;
		
	}
	public  String generatescript(String Pipeline) throws IOException {
		// TODO Auto-generated method stub
		String AutoGeneratedScript="";
		HashMap<String, Vector<String>> mtzcol=new MTZReader(Parameters.getReflectionFile()).GetColLabels();
		String Rfreeflag=mtzcol.get("I").get(0);
		String MRHeader="";
		
		
		HashMap<String,String> ResultsDir= new HashMap<String,String>();
		ResultsDir.put("Buccaneer", "BuccaneerResults/PDBs/");
		ResultsDir.put("ARPwARP", "wArpResults/PDBs/");
		ResultsDir.put("Phenix AutoBuild", "PhenixResults/PDBs/");
		ResultsDir.put("Phenix AutoBuild(P)", "PhenixResults/PDBs/");
		ResultsDir.put("SHELXE", "shelxeResults/PDBs/");
		ResultsDir.put("SHELXE(P)", "shelxeResults/PDBs/");
		
	
		Vector<String> PipelinesNames=new Vector<String>();
		if(Pipeline.contains("|")) {
			PipelinesNames.addAll(Arrays.asList(Pipeline.split("\\|")));
		}
		else {
			PipelinesNames.add(Pipeline);
		}
		
		for(int p=0 ; p < PipelinesNames.size();++p) {
			Pipeline=PipelinesNames.get(p);
			 String FOMAndPHIBScript="";
			if(Parameters.getMR().equals("F"))
			  FOMAndPHIBScript=ScriptForColSelection("P","Phase (No density modification applied)")+"\n"+ScriptForColSelection("W","figure of merit");

		//i1
		if(Pipeline.equals("Buccaneer")) {
			
		String i1 ="\n"+"java -jar RunComparison.jar RunCBuccaneer CheckCCP4AndPhenixEnvVar=F data=$maindir/inputdata Iterations=5 UsingRFree=T Phases="+Parameters.getParrotPhases()+" Colinfo="+Parameters.getColinfo()+" Rfreeflag="+Rfreeflag;
		
		
		
		
		AutoGeneratedScript+="\n"+i1;
		}
		
		if(Pipeline.equals("ARPwARP")) {
			String inputfolder="inputdataChltofom";
			String ARPwARP ="";
			if(Parameters.getMR().equals("F")) {
			ARPwARP ="\n java -jar RunComparison.jar chltofom CheckCCP4AndPhenixEnvVar=F data=$maindir/inputdata Phases="+Parameters.getParrotPhases();
			ARPwARP +="\n"+"cp inputdata/"+Parameters.getReflectionFileName()+".fasta inputdataChltofom";
			}
			else {
				ARPwARP="";// no need for chltofom
				inputfolder="inputdata";
			}
			if(PipelinesNames.size()>1)
				ARPwARP +="\n"+"java  -jar RunComparison.jar RunwArp CheckCCP4AndPhenixEnvVar=F data=$maindir/"+inputfolder+" wArpAutotracing=$warpbin/auto_tracing.sh UsingRFree=T UseBuccModels=F Colinfo="+Parameters.getColinfo()+ " Rfreeflag="+Rfreeflag;

			else
				ARPwARP +="\n"+"java  -jar RunComparison.jar RunwArp CheckCCP4AndPhenixEnvVar=F data=$maindir/"+inputfolder+" wArpAutotracing=$warpbin/auto_tracing.sh UsingRFree=F UseBuccModels=F Colinfo="+Parameters.getColinfo();
	
			
			AutoGeneratedScript+="\n"+ARPwARP;
		}
		
		if(Pipeline.equals("Phenix AutoBuild") || Pipeline.equals("Phenix AutoBuild(P)")) {
			
			String PhenixAutoBuild ="\n PhenixAutoBuild=$(find $PHENIX -name \"phenix.autobuild\") \n ";
			
			//PhenixAutoBuild+="java -jar RunComparison.jar chltofom CheckCCP4AndPhenixEnvVar=F data=$maindir/inputdata Phases="+Parameters.getPhases()+ " chtofomcolname=noparrot";

			String RunCommand="java  -jar RunComparison.jar RunPhenix CheckCCP4AndPhenixEnvVar=F data=$maindir/inputdata PhenixAutobuild=$PhenixAutoBuild UsingRFree=T Colinfo="+Parameters.getColinfo()+" Phase=$P"+" FigureOfMerit=$W"+" NoDMPhases="+Parameters.getPhases()+" Rfreeflag="+Rfreeflag;
			
			if(Parameters.getMR().equals("T")) {
				 RunCommand="java  -jar RunComparison.jar RunPhenix CheckCCP4AndPhenixEnvVar=F data=$maindir/inputdata PhenixAutobuild=$PhenixAutoBuild UsingRFree=T Colinfo="+Parameters.getColinfo()+" Rfreeflag="+Rfreeflag;
				 FOMAndPHIBScript="";
			}
			
				if(Pipeline.equals("Phenix AutoBuild(P)")) {
					RunCommand+=" Phases=hltofom.Phi_fom.phi,hltofom.Phi_fom.fom,"+Parameters.getParrotPhases()+" DensityModified=T";
					if(Parameters.getPhases().equals(Parameters.getParrotPhases())) {
						PhenixAutoBuild+="echo \"Your running Phenix Autobuild after Parrot, but you are passing to Phenix Autobuild two set of phases: "+Parameters.getPhases()+" and "+Parameters.getParrotPhases()+", and both are the same. To run Phenix Autobuild after Parrot, you need the original phases and phases after Parrot.\"\n  ";
					}
					PhenixAutoBuild+="\n java -jar RunComparison.jar chltofom CheckCCP4AndPhenixEnvVar=F data=$maindir/inputdata Phases="+Parameters.getParrotPhases()+"\n";
					RunCommand=RunCommand.replaceAll("inputdata", "inputdataChltofom");
				}
				PhenixAutoBuild="\n"+PhenixAutoBuild+"\n "+RunCommand;
				
				
			
			AutoGeneratedScript+="\n"+FOMAndPHIBScript+"\n"+PhenixAutoBuild;
		}
		
		if(Pipeline.equals("SHELXE") || Pipeline.equals("SHELXE(P)")) {
			String SHELXE="";
			 SHELXE ="\n java -jar RunComparison.jar chltofom CheckCCP4AndPhenixEnvVar=F data=$maindir/inputdata Phases="+Parameters.getPhases();
			 String FOM="$W";
			 String PHIB="$P";
			 String inputfolder="inputdataChltofom";
			 if(Pipeline.equals("SHELXE(P)")) {
				SHELXE ="\n java -jar RunComparison.jar chltofom CheckCCP4AndPhenixEnvVar=F data=$maindir/inputdata Phases="+Parameters.getParrotPhases();
				FOM="hltofom.Phi_fom.fom";
				PHIB="hltofom.Phi_fom.phi";
				FOMAndPHIBScript="";// no need
			 }
			 if(Parameters.getMR().equals("T")) {
				 inputfolder="inputdata";
				 SHELXE="mv "+inputfolder+"/"+Parameters.getReflectionFileName()+".pdb "+inputfolder+"/"+Parameters.getReflectionFileName()+".pda \n";
			 }
			 
			 
			
				SHELXE+= "\n echo \"CELL "+new MTZReader(Parameters.getReflectionFile()).Cell()+"\" >> "+inputfolder+"/\"mtzname.shelxc\"\n"
					+ "echo \"SPAG "+new MTZReader(Parameters.getReflectionFile()).Spacegroup()+"\" >> "+inputfolder+"/\"mtzname.shelxc\"\n"
					+ "echo \"SAD mtzname.hkl\" >> "+inputfolder+"/\"mtzname.shelxc\"\n"
					+ "mtz2various HKLOUT "+inputfolder+"/mtzname.hkl hklin "+inputfolder+"/mtzname.mtz <<eof\n"
					+ "LABIN  FP="+Parameters.getColinfo().split(",")[0]+" SIGFP="+Parameters.getColinfo().split(",")[1]+" FREE="+Rfreeflag+"\n"
					+ "OUTPUT SHELX\n"
					+ "FSQUARED\n"
					+ "END\n"
					+ "eof\n";
				if(Parameters.getMR().equals("F"))
				SHELXE+=" mtz2various  HKLIN "+inputfolder+"/mtzname.mtz HKLOUT "+inputfolder+"/mtzname.phi << eof\n"
					+ "LABIN FP="+Parameters.getColinfo().split(",")[0]+" FOM="+FOM+" PHIB="+PHIB+" SIGFP="+Parameters.getColinfo().split(",")[1]+"\n"
					+ "OUTPUT USER (3I5,f9.2,f8.4,f8.1,f8.2)\n"
					+ "FSQUARED\n"
					+ "END\n"
					+ "eof\n"
					+ "cd "+inputfolder+"\n"
					+ "$CBIN/shelxc mtzname < \"mtzname.shelxc\"\n"
					+ "mv \"mtzname_fa.ins\" mtzname.ins\n"
					+ "rm  *sad.cif *fa.hkl \n"
					+ "cd ..";
			
			
			SHELXE+="\n java  -jar RunComparison.jar RunShelxe CheckCCP4AndPhenixEnvVar=F data="+inputfolder+"/ Shelxe=shelxe";
			
			
			SHELXE=SHELXE.replaceAll("mtzname", Parameters.getReflectionFileName());
			
			AutoGeneratedScript+="\n"+FOMAndPHIBScript+"\n"+SHELXE;
		}
		
		
		if(p!=0) {
			AutoGeneratedScript +=" InitialModels="+ResultsDir.get(PipelinesNames.get(p-1))+" UseInitialModels=T "; 
		}
		
		if(Parameters.getMR().equals("T")) {
			AutoGeneratedScript +=" MR=T $MRsemet";
			MRHeader="if [ ! -f "+Parameters.getReflectionFileName()+".pdb ]; then\n"
					+ "    echo \"The serach model "+Parameters.getReflectionFileName()+".pdb not found! please copy the serach model in this folder $maindir The file should have the same name.\"\n"
					+ "    exit 3\n"
					+ "fi\n";
			MRHeader+= "mv "+Parameters.getReflectionFileName()+".pdb inputdata \n";
			MRHeader+="\n echo  \"Do you want to build semet Y/N?\"\n"
			+ "read -r semet\n"
			+ "\n"
			+ "MRsemet=\"\"\n"
			+ "if [[ $semet == \"Y\" ]]; then\n"
			+ "    MRsemet=\"semet=T\"\n"
			+ "else\n"
			+ "    MRsemet=\"semet=F\"\n"
			+ "fi\n";
			
			
					
		}
		
		AutoGeneratedScript+="\n"+"if [  -f "+ResultsDir.get(Pipeline)+Parameters.getReflectionFileName()+".pdb ]; then\n"
				+ "    cp "+ResultsDir.get(Pipeline)+Parameters.getReflectionFileName()+".pdb ./\n"
				+ "    echo \""+Pipeline+" has finished running. \n "+
				
				" The final model: "+Parameters.getReflectionFileName()+".pdb\"\n"
				+ "fi\n"
				+ "if [ ! -f "+ResultsDir.get(Pipeline)+Parameters.getReflectionFileName()+".pdb ]; then\n"
				+ "    \n"
				+ "    echo \"Something went wrong!\"\n"
				+"\n exit 3 \n"
				+ "fi";
		
	}
		String Header="";
		if(AutoGeneratedScript.contains("Phenix ")) {
			Header+="\n"+"if [[ -z \"${PHENIX}\" ]]; then\n"
					+ "echo \"PHENIX either not installed or need to set up environment variables. To set up environment variables you need to do \\\"source phenix_env.sh\\\". phenix_env.sh should be in main Phenix installation folder.\"\n"
					+ "exit 3\n"
					+ "fi";
		}
		if(AutoGeneratedScript.contains("SHELXE") || AutoGeneratedScript.contains("ARPwARP") || AutoGeneratedScript.contains("Buccaneer") || AutoGeneratedScript.contains("Phenix AutoBuild(P)")) {
			Header+="\n"+"if [[ -z \"${CCP4}\" ]]; then\n"
					+ "echo \"CCP4 either not installed or need to set up environment variables. To set up environment variables you need to do \\\"source ccp4.setup-sh\\\". ccp4.setup-sh should be in bin folder in CCP4 installation folder.\"\n"
					+ "exit 3\n"
					+ "CCP4=\"${CCP4}\"\n"
					+ "fi";
		}
		Header+="\n maindir=$(pwd)\n"
				+ "if [ ! -f "+Parameters.getReflectionFileName()+".mtz ]; then\n"
				+ "    echo \"The reflection file "+Parameters.getReflectionFileName()+".mtz not found! please copy the reflection file in this folder $maindir The file should have the same name.\"\n"
				+ "    exit 3\n"
				+ "fi\n"
				+ "if [ ! -f "+Parameters.getReflectionFileName()+".fasta ]; then\n"
				+ "    echo \"The sequence file "+Parameters.getReflectionFileName()+".fasta not found! please copy the sequence file in this folder $maindir The file should have the same name.\"\n"
				+ "    exit 3\n"
				+ "fi\n"
		        + "echo \"*** Download comparison tool ...\"\n"
				+ "curl -s https://api.github.com/repos/E-Alharbi/PipelinesComparisonTool/releases/latest \\\n"
				+ "| grep \"browser_download_url.*jar\" \\\n"
				+ "| cut -d : -f 2,3 \\\n"
				+ "| tr -d \\\" \\\n"
				+ "| wget -c  -qi -\n"
				+ "echo \"*** Download comparison tool ... done\"\n"
				+ "\n"
				+ "mkdir inputdata\n"
				+ "mv "+Parameters.getReflectionFileName()+".mtz inputdata\n"
				+ "mv "+Parameters.getReflectionFileName()+".fasta inputdata";
			
				
			Header+="\n"+MRHeader;
		
			return "#!/bin/bash \n"+Header+"\n"+AutoGeneratedScript;
		
	}
		

}
